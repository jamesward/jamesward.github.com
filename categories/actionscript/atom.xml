<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ActionScript | James Ward]]></title>
  <link href="http://jamesward.github.com/categories/actionscript/atom.xml" rel="self"/>
  <link href="http://jamesward.github.com/"/>
  <updated>2011-12-12T21:25:53-07:00</updated>
  <id>http://jamesward.github.com/</id>
  <author>
    <name><![CDATA[James Ward]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Flex and Java Differences: Getters & Setters]]></title>
    <link href="http://jamesward.github.com/2010/05/07/flex-and-java-differences-getters-setters/"/>
    <updated>2010-05-07T07:57:37-06:00</updated>
    <id>http://jamesward.github.com/2010/05/07/flex-and-java-differences-getters-setters</id>
    <content type="html"><![CDATA[<p>In Java it has become a standard practice to use a getter &amp; setter notation to provide a consistent interface to an object's properties.  There is a reason why we don't do the following in Java:</p>

<pre><code>public String fullName;
</code></pre>

<p>The code above essentially creates an interface (or contract) between the class and the implementors of this class that does not allow us to change the underlying implementation of what gets returned when the fullName property is accessed on an instance of the class.  So if someone has Java code that accesses the fullName property:</p>

<pre><code>blah = obj.fullName;
</code></pre>

<p>Or sets the fullName property:</p>

<pre><code>obj.fullName = "blah";
</code></pre>

<p>Then in Java there is no way to change the behavior of getting or setting the fullName property.  If the author of the class wanted to change the underlying behavior of the getting or setting they would have to change how the implementors of the class interact with the class.  That is obviously not ideal so in Java we typically hide properties with get and set functions.  The Java language doesn't yet have Java properties so we use methods to hide the implementation.  So our Java class instead would be:</p>

<pre><code>private String fullName;

public String getFullName() {
    return fullName;
}

public void setFullName(String fullName) {
    this.fullName = fullName;
}
</code></pre>

<p>This allows the class author to change the behavior of getting and setting the fullName property without changing the external interface.</p>

<p>In Flex it is not usually necessary to create the wrapper getter and setting functions on an object because ActionScript supports properties.  This means that you can usually just create public properties like:</p>

<pre><code>public var fullName:String;
</code></pre>

<p>If the internal implementation of getting or setting the fullName property needs to change, then the class can be adapted to have getter and setter functions without changing the external interface of the class:</p>

<pre><code>private var _fullName:String;

public function get fullName():String {
    return _fullName;
}

public function set fullName(_fullName:String):void {
    this._fullName = _fullName;
}
</code></pre>

<p>To the class implementor the property fullName could still be get and set through the normal notations:</p>

<pre><code>// getters
blah = obj.fullName;
blah = obj['fullName'];
// setters
obj.fullName = "blah";
obj['fullName'] = "blah";
</code></pre>

<p>Getting or setting the property would call the getter and setter functions instead of accessing the property directly.  This allows the interface of the object to stay the same even if the underlying implementation of getting and setting the property changes.  This also allows a class to dispatch events when properties change (this is how Data Binding works internally in Flex).</p>

<p>I see a lot of Java developers who are wary of public properties on ActionScript classes.  Don't be!  ActionScript supports real properties so you shouldn't ever need property getters and setters unless you are doing something out of the ordinary.  And you can switch to getters and setters without changing the interface to the object.</p>

<p>If you would like to learn more about the differences between ActionScript and Java check out my <a href="http://www.adobe.com/cfusion/event/index.cfm?event=detail&amp;id=1489921&amp;loc=en_us&amp;sdid=EUQZQ">AS34J: ActionScript 3 for Java Developers eSeminar</a> next week!</p>

<p>UPDATE: Watch the <a href="http://www.jamesward.com/2010/05/17/watch-as34j-actionscript-3-for-java-developers/"> recording of my eSeminar presentation</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Query the Loaded Classes in Flex / AS3]]></title>
    <link href="http://jamesward.github.com/2009/09/16/query-the-loaded-classes-in-flex-as3/"/>
    <updated>2009-09-16T11:00:09-06:00</updated>
    <id>http://jamesward.github.com/2009/09/16/query-the-loaded-classes-in-flex-as3</id>
    <content type="html"><![CDATA[<p>One of the things I love most about programming is running into walls and then finding creative ways to get over (or through) them.  The most recent wall I ran into with Flex was that I wanted to be able to find classes at runtime that either implement a given interface or have specific metadata on them.  Flash Player doesn't provide an API to do this directly so I went searching for a workaround.  <a href="http://www.herrodius.com/blog/">Christophe Herreman</a> tipped me off to a few great utilities for doing this:</p>

<ul>
<li><p><a href="http://etcs.ru/pre/getDefinitionNamesSource/">getDefinitionNames</a> by Denis Kolyako</p></li>
<li><p><a href="http://www.as3commons.org/as3-commons-reflect/index.html">as3-commons-reflect</a></p></li>
</ul>


<p>A Flex application (using the Flex framework or AS3 only) can use getDefinitionNames to query any loaded SWF file (Application, Module, etc) for its class definitions.  The getDefinitionNames utility just parses through the loaded bytecode and finds the class definitions.  Then the as3-commons-reflect library can help determine which of those classes implement a given interface or have specific metadata on them.  Here is an example:</p>

<p><a href="/demos/GetClasses/srcview/index.html">(source code)</a></p>

<p>Here is how it works:</p>

<pre><code>    var a:Array = getDefinitionNames(systemManager.loaderInfo);

    allClasses.dataProvider = a;

    ifooClasses.dataProvider = new ArrayCollection();
    metafooClasses.dataProvider = new ArrayCollection();

    for each (var cn:String in a)
    {
      var t:Type = Type.forName(cn);
      for each (var md:MetaData in t.metaData)
      {
        if (md.name == "MetaFoo")
        {
          metafooClasses.dataProvider.addItem(cn);
          break;
        }
      }

      if (ClassUtils.getImplementedInterfaceNames(t.clazz).indexOf("IFoo") &gt;= 0)
      {
        ifooClasses.dataProvider.addItem(cn);
      }
    }
</code></pre>

<p>Pretty cool!  There are a number of fun uses for this kind of thing...  Modular IOC containers, client-side plugins, etc.</p>

<p>Getting over this wall was pretty easy thanks to Denis and Christophe.  The Flex / AS3 community rocks!</p>
]]></content>
  </entry>
  
</feed>
